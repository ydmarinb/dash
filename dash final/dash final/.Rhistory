hurto <- read.csv('hurto.csv')
library(shinydashboard)
library(shiny)
hurto <- read.csv('hurto.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggpubr")
table(hurto$modalidad,hurto$sede_receptora)
runApp()
hurto <- read.csv('hurto.csv')
attach(hurto)
tabla <- table(modalidad, sede_receptora)
tabla <- data.frame(table(modalidad, sede_receptora))
View(tabla)
tabla <- data.frame(table(modalidad, arma_medio))
tabla
source('~/.active-rstudio-document', echo=TRUE)
tabla
tabla <- (table(modalidad, arma_medio))
tabla
tabla <- (table(modalidad, arma_medio))
write.csv(x = tabla, 'tabla.csv')
write.csv(x = tabla, 'tabla.csv', fileEncoding = 'Latin1')
tabla <- read.csv('tabla.csv')
View(tabla)
rownames(tabla) <- tabla$X
View(tabla)
tabla$X <- NULL
View(tabla)
write.csv(x = tabla, 'tabla.csv', fileEncoding = 'Latin1', row.names = T)
tabla <- read.csv('tabla.csv')
rownames(tabla) <- tabla$X
tabla$X <- NULL
runApp()
iris[, 3:4]
head(iris[, 3:4])
library(ggmosaic)
install.packages("ggmosaic")
runApp()
runApp()
levels(hurto$medio_transporte)
runApp()
runApp()
runApp()
levels(hurto$medio_transporte)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shiny.semantic)
library(semantic.dashboard)
library(plotly)
library(DT)
ui <- dashboardPage(
dashboardHeader(dropdownMenuOutput("dropdown"),
dropdownMenu(type = "notifications",
taskItem("Project progress...", 50.777, color = "red")),
dropdownMenu(icon = uiicon("red warning sign"),
notificationItem("This is an important notification!", color = "red"))),
dashboardSidebar(side = "left",
sidebarMenu(
menuItem(tabName = "plot_tab", text = "My plot", icon = icon("home")),
menuItem(tabName = "table_tab", text = "My table", icon = icon("smile")))),
dashboardBody(
tabItems(
tabItem(tabName = "plot_tab",
fluidRow(
valueBox("Unread Mail", 44, icon("mail"), color = "blue", width = 5)),
fluidRow(
box(title = "Sample box", color = "blue", width = 11,
selectInput(inputId =  "variable1", choices = names(mtcars),
label = "Select first variable", selected = "mpg"),
selectInput(inputId =  "variable2", choices = names(mtcars),
label = "Select second variable", selected = "cyl"),
plotlyOutput("mtcars_plot")),
tabBox(title = "Sample box", color = "blue", width = 5,
collapsible = FALSE,
tabs = list(
list(menu = "First Tab", content = "Some text..."),
list(menu = "Second Tab", content = plotlyOutput("mtcars_plot2"))
)))),
tabItem(tabName = "table_tab",
fluidRow(
valueBox("Unread Mail", 144, icon("mail"), color = "blue", width = 6, size = "small"),
valueBox("Spam", 20, icon("mail"), color = "red", width = 5, size = "small"),
valueBox("Readed Mail", 666, icon("mail"), color = "green", width = 5, size = "small")
),
fluidRow(
box(title = "Classic box", color = "blue", ribbon = FALSE,
title_side = "top left", width = 14,
tags$div(
dataTableOutput("mtcars_table")
, style = paste0("color:", semantic_palette[["blue"]], ";"))
))))
), theme = "slate"
)
server <- function(input, output) {
output$mtcars_plot <- renderPlotly(plot_ly(mtcars, x = ~ mtcars[ , input$variable1],
y = ~ mtcars[ , input$variable2],
type = "scatter", mode = "markers")
)
output$mtcars_plot2 <- renderPlotly(plot_ly(mtcars, x = ~ mtcars[ , input$variable1],
y = ~ mtcars[ , input$variable2],
type = "scatter", mode = "markers"))
output$mtcars_table <- renderDataTable(mtcars, options = list(dom = 't'))
output$dropdown <- renderDropdownMenu({
dropdownMenu(messageItem("User", "Test message", color = "teal", style = "min-width: 200px"),
messageItem("Users", "Test message", color = "teal", icon = "users"),
messageItem("See this", "Another test", icon = "warning", color = "red"))
})
}
shinyApp(ui, server)
runApp('d')
install.packages(c("semantic.dashboard", "shiny.semantic"))
runApp('d')
runApp()
runApp()
shiny::runApp()
runApp()
library(plotly)
runApp()
