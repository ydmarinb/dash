library(shiny); runApp('Simposio/dash borad/dash final.R')
longitude=c(-110,-90,-100,-85)
latitude=c(33,40,37,34)
sensorID=c("SN100","SN200","SN300","SN400")
i=0
while(i<100){
dat=data.frame(timestamp=as.numeric(Sys.time()),sensorID=sensorID,longitude=longitude,latitude=latitude,
temperature=rnorm(n=4,mean=30,sd=1))
write.csv(dat,paste0("sensorData",gsub("[^0-9]","",Sys.time()),".csv"),
row.names = FALSE)
i=i+1
Sys.sleep(10)
}
while(TRUE){
dat=data.frame(timestamp=as.numeric(Sys.time()),sensorID=sensorID[1:3],longitude=longitude[1:3],latitude=latitude[1:3],
temperature=rnorm(n=3,mean=30,sd=1))
write.csv(dat,paste0("sensorData",gsub("[^0-9]","",Sys.time()),".csv"),
row.names = FALSE)
Sys.sleep(2)
}
longitude=c(-110,-90,-100,-85)
latitude=c(33,40,37,34)
sensorID=c("SN100","SN200","SN300","SN400")
i=0
while(i<100){
dat=data.frame(timestamp=as.numeric(Sys.time()),sensorID=sensorID,longitude=longitude,latitude=latitude,
temperature=rnorm(n=4,mean=30,sd=1))
write.csv(dat,paste0("sensorData",gsub("[^0-9]","",Sys.time()),".csv"),
row.names = FALSE)
i=i+1
Sys.sleep(2)
}
while(TRUE){
dat=data.frame(timestamp=as.numeric(Sys.time()),sensorID=sensorID[1:3],longitude=longitude[1:3],latitude=latitude[1:3],
temperature=rnorm(n=3,mean=30,sd=1))
write.csv(dat,paste0("sensorData",gsub("[^0-9]","",Sys.time()),".csv"),
row.names = FALSE)
Sys.sleep(2)
}
i=0
while(i<100){
dat=data.frame(timestamp=as.numeric(Sys.time()),sensorID=sensorID,longitude=longitude,latitude=latitude,
temperature=rnorm(n=4,mean=30,sd=1))
write.csv(dat,paste0("sensorData",gsub("[^0-9]","",Sys.time()),".csv"),
row.names = FALSE)
i=i+1
Sys.sleep(2)
}
hurto <- read.csv('../Documents/Simposio/dash borad/hurto.csv')
hurto
View(hurto)
attach(hurto)
View(hurto)
str(hurto)
library(lubridate)
hurto$fecha_hecho <- ymd_hms(hurto$fecha_hecho)
fecha_hecho
View(hurto)
temp <- tempfile()
url <- "https://ed-public-download.apps.cloud.gov/downloads/CollegeScorecard_Raw_Data.zip"
download.file(url,temp,method="curl")
data <- read.csv(unz(temp, "CollegeScorecard_Raw_Data/MERGED2014_15_PP.csv"), na.strings = c("NA","NULL","#DIV/0!",""), stringsAsFactors = FALSE)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lng = -73.98575,
lat = 40.74856,
zoom = 13)
leaflet(options =
leafletOptions(dragging = FALSE,
minZoom = 14,
maxZoom = 18))  %>%
addProviderTiles("CartoDB")  %>%
setView(lng = -73.98575, lat = 40.74856, zoom = 18)
View(hurto)
leaflet(options =
leafletOptions(dragging = FALSE,
minZoom = 14,
maxZoom = 18))  %>%
addProviderTiles("CartoDB")  %>%
setView(lng = --75.56738, lat = 6.264449, zoom = 18)
leaflet()  %>%
addProviderTiles("CartoDB")  %>%
setView(lng = --75.56738, lat = 6.264449, zoom = 18)
longitude=c(-110,-90,-100,-85)
latitude=c(33,40,37,34)
leaflet()  %>%
addProviderTiles("CartoDB")  %>%
setView(lng = -75.56738, lat = 6.264449, zoom = 18)
View(hurto)
hurto[1:7,c(1,2)]
unique(hurto[1:7,c(1,2)])
hurto[1:7,c(1,2)]
longitude=c(-75.56738,-75.56662,-75.57598,-75.56677, -75.56504)
latitude=c(6.264449,6.225272,6.231931,6.248125, 6.221754)
longitude=c(-75.56738,-75.56662,-75.57598,-75.56677, -75.56504)
latitude=c(6.264449,6.225272,6.231931,6.248125, 6.221754)
leaflet()  %>%
addProviderTiles("CartoDB")  %>%
setView(lng = longitude, lat = latitude, zoom = 18)
leaflet()  %>%
addProviderTiles("CartoDB")  %>% addMarkers(lng = longitude, lat = latitude)
leaflet()  %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitude, lat = latitude, clusterOptions = markerClusterOptions())
leaflet()  %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitude, lat = latitude)
leaflet()  %>%
setView(lng = -75.7032928,
lat = 6.2707553,
zoom = 13) %>%
addMarkers(lng = longitude, lat = latitude)
leaflet()  %>% setView(lng = -75.7032928,
lat = 6.2707553,
zoom = 13) %>%
addMarkers(lng = longitude, lat = latitude)
leaflet()  %>% addMarkers(lng = longitude, lat = latitude)
source('~/.active-rstudio-document', echo=TRUE)
leaflet()  %>%
setView(lng = -75.7032928, lat = 6.2707553, zoom = 13) %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitude, lat = latitude)
leaflet()  %>%
setView(lng = -75.5763927, lat = 6.2602243, zoom = 13) %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitude, lat = latitude)
leaflet()  %>%
setView(lng = -75.5763927, lat = 6.2602243, zoom = 14) %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitude, lat = latitude)
leaflet()  %>%
setView(lng = -75.5763927, lat = 6.2602243, zoom = 10) %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitude, lat = latitude)
library(shiny)
library(shinydashboard)
library(plotly)
library(tidyverse)
# ======================================================
sidebar <- dashboardSidebar( fluidRow(
column(7,actionButton("stop","Stop")),
column(3,actionButton("play","Play")))
#=========================================================
header <- dashboardHeader(title = "Filtros")
body <- dashboardBody(
fluidRow(
column(6,plotOutput('mygraph'))
# ========================================================
ui <- dashboardPage(header = header,
body = body, sidebar = sidebar)
# ================================================
server <- function(input, output, session) {
waits <- reactiveValues()
waits$data <- NULL
forward<-function(){
newwait<-rbinom(5, 10, 0.6)
waits$data <- head(c(newwait,waits$data),52) # append new arrivals to start
}
session<-reactiveValues()
session$timer<-reactiveTimer(Inf)
observeEvent(input$play,{
session$timer<-reactiveTimer(2000)
observeEvent(session$timer(),{
forward()
})
})
observeEvent(input$stop,{
session$timer<-reactiveTimer(Inf)
})
output$mygraph<-renderPlot({
if(sum(waits$data)==0){
return() # no plot if reset
}
barcolours<-c(rep("green3",26),rep("yellow2",10),rep("red2",16))
bp<-barplot(waits$data,xlab="Weeks Wait",ylab="Volume",col=barcolours,space=0,width=1)
bp
abline(v=26)
abline(v=36)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
library(plotly)
library(tidyverse)
library(shiny)
#setwd('../Documents/Simposio/dash borad/')
hurto <- read.delim(file = 'hurto.txt', encoding = 'Latin1')
attach(hurto)
# ======================================================
sidebar <- dashboardSidebar(
selectInput(inputId = 'barrio', label = 'Selecciones el Barrio', choices = unique(hurto$nombre_barrio)),
selectInput(inputId = 'lugar', label = 'Selecciones el lugar', choices = unique(hurto$lugar) ),
selectInput(inputId = 'grupo_bien', label = 'Selecciones el grupo del bien', choices = unique(hurto$grupo_bien))
)
#=========================================================
header <- dashboardHeader(title = "Filtros")
#=======================================================
body <- dashboardBody(
fluidRow(
box(plotlyOutput('medio_t', width = "100%", height = "400px",
inline = FALSE)),
box(plotlyOutput('modalidad', width = "100%", height = "400px",
inline = FALSE)),
box(plotlyOutput('arma_m', width = "100%", height = "400px",
inline = FALSE)),
box(plotlyOutput('categoria_b', width = "100%", height = "400px",
inline = FALSE))
)
)
# ========================================================
ui <- dashboardPage(header = header,
body = body, sidebar = sidebar)
# ===================================================================
server <- function(input, output) {
data <- reactive({
hurto %>%
filter(nombre_barrio == input$barrio &
lugar == input$lugar &
grupo_bien == input$grupo_bien)
})
output$medio_t <- renderPlotly({
medio_t <- ggplot(data(), aes(x = bien)) +
geom_bar(stat = 'count', color = 'blue', fill = 'white') +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = 'Bien',
title = 'Frecuencia por Bien', y = 'Frecuencia')
ggplotly(medio_t)
})
#======================================================
output$modalidad<- renderPlotly({
modalidad <- ggplot(data(), aes(x = modalidad)) +
geom_bar(stat = 'count', color = 'blue', fill = 'white') +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = 'Modalidad',
title = 'Frecuencia por modalidad', y = 'Frecuencia')
return(ggplotly(modalidad))
})
# ===============================================
output$arma_m<- renderPlotly({
arma_m <- ggplot(data(), aes(x = arma_medio)) +
geom_bar(stat = 'count', color = 'blue', fill = 'white') +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = 'Arma medio',
title = 'Frecuencia por arma', y = 'Frecuencia')
ggplotly(arma_m)
})
# ===================================================
output$categoria_b<- renderPlotly({
categoria_b <- ggplot(data(), aes(x = categoria_bien)) +
geom_bar(stat = 'count', color = 'blue', fill = 'white') +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = 'Categoria bien',
title = 'Frecuencia por categoria bien', y = 'Frecuencia')
ggplotly(categoria_b)
})
# =========================================================
output$categoria_b<- renderPlotly({
categoria_b <- ggplot(data(), aes(x = categoria_bien)) +
geom_bar(stat = 'count', color = 'blue', fill = 'white') +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = 'Categoria bien',
title = 'Frecuencia por categoria bien', y = 'Frecuencia')
ggplotly(categoria_b)
})
}
shinyApp(ui, server)
longitude=c(-75.56738,-75.56662,-75.57598,-75.56677, -75.56504)
latitude=c(6.264449,6.225272,6.231931,6.248125, 6.221754)
rbinom(n = 15, size = 68, prob = 0.8)
hurto <- read.csv('../Documents/Simposio/dash borad/hurto.csv')
str(hurto)
unique(hurto$modalidad)
unique(hurto$medio_transporte)
unique(hurto$sede_receptora)
unique(hurto$edad)
length(unique(hurto$modalidad))
rbinom(n = 15, size = 68, prob = 0.8)
rbinom(n = 15, size = 50, prob = 0.8)
hurto$nombre_barrio
unique(hurto$nombre_barrio)
order(unique(hurto$nombre_barrio))
unique(hurto$nombre_barrio)
View(hurto)
sample(unique(hurto$sede_receptora), 1)
library(shiny); runApp('Simposio/dash borad/dash final.R')
runApp('Simposio/dash borad/dash final.R')
setwd('../Documents/Simposio/dash borad/data/')
runApp('~/Simposio/dash borad/dash final.R')
filenames <- list.files(pattern="*.csv", full.names=TRUE)
filenames
data_at_start <- rbindlist(lapply(filenames, fread))
data_at_start
ids_at_start <- unique(data_at_start$barrios)
ids_at_start
IsThereNewFile <- function(){
filenames <- list.files(pattern="*.csv", full.names=TRUE)
length(filenames)
}
ReadAllData=function(){
filenames <- list.files(pattern="*.csv", full.names=TRUE)
temp= rbindlist(lapply(filenames, fread))
temp$timestamp =as.POSIXct(as.numeric(as.character(temp$timestamp)),origin="1970-01-01",tz="GMT")
temp
}
sidebar <- dashboardSidebar(
)
header <- dashboardHeader(title = "Filtros")
body <- dashboardBody(
fluidRow(
box(leafletOutput('myleaflet', width = "100%", height = "400px")),
box(plotOutput('timeseries_all', width = "100%", height = "400px")),
box(plotOutput('modalidad', width = "100%", height = "400px"))
)
)
ui <- dashboardPage(header = header,
body = body, sidebar = sidebar)
# ===================================================================
server <- function(input, output, session) {
alldata <- reactivePoll(10, session,IsThereNewFile, ReadAllData)
output$myleaflet <- renderLeaflet({
leaflet()  %>%
setView(lng = -75.5763927, lat = 6.2602243, zoom = 10) %>%
addProviderTiles("CartoDB")  %>%
addMarkers(lng = longitud, lat = latitud)
})
output$timeseries_all = renderPlot({
dat=alldata()
end=nrow(dat)
start=1
if(nrow(dat)>=1){
dat[start:end,]%>%ggplot(aes(x=timestamp,y=robos))+
geom_line(aes(color=barrios))+
theme(axis.title.x = element_blank(),
axis.title.y = element_text(colour="blue",size=14),
axis.text = element_text(colour="darkred",size=12),
plot.title = element_blank())
}
})
output$modalidad = renderPlot({
dat=alldata()
end=nrow(dat)
start=1
if(nrow(dat)>=1){
dat[start:end,]%>%ggplot(aes(x=modalidad,y= sumM))+
geom_col(aes(fill=barrios))+
theme(axis.title.x = element_blank(),
axis.title.y = element_text(colour="blue",size=14),
axis.text = element_text(colour="darkred",size=12),
plot.title = element_blank())
}
})
}
shinyApp(ui, server)
runApp('~/Simposio/dash borad/dash final.R')
